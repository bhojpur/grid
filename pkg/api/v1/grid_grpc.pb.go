// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GridServiceClient is the client API for GridService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GridServiceClient interface {
	// StartLocalStation starts a Station on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the grid/config.yaml
	//   3. all bytes constituting the Station YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalStation(ctx context.Context, opts ...grpc.CallOption) (GridService_StartLocalStationClient, error)
	// StartFromPreviousStation starts a new Station based on a previous one.
	// If the previous Station does not have the can-replay condition set this call will result in an error.
	StartFromPreviousStation(ctx context.Context, in *StartFromPreviousStationRequest, opts ...grpc.CallOption) (*StartStationResponse, error)
	// StartStationRequest starts a new Station based on its specification.
	StartStation(ctx context.Context, in *StartStationRequest, opts ...grpc.CallOption) (*StartStationResponse, error)
	// Searches for Station known to this instance
	ListStation(ctx context.Context, in *ListStationRequest, opts ...grpc.CallOption) (*ListStationResponse, error)
	// Subscribe listens to new Station updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (GridService_SubscribeClient, error)
	// GetStation retrieves details of a single Station
	GetStation(ctx context.Context, in *GetStationRequest, opts ...grpc.CallOption) (*GetStationResponse, error)
	// Listen listens to Station updates and log output of a running Station
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (GridService_ListenClient, error)
	// StopStation stops a currently running Station
	StopStation(ctx context.Context, in *StopStationRequest, opts ...grpc.CallOption) (*StopStationResponse, error)
}

type gridServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGridServiceClient(cc grpc.ClientConnInterface) GridServiceClient {
	return &gridServiceClient{cc}
}

func (c *gridServiceClient) StartLocalStation(ctx context.Context, opts ...grpc.CallOption) (GridService_StartLocalStationClient, error) {
	stream, err := c.cc.NewStream(ctx, &GridService_ServiceDesc.Streams[0], "/v1.GridService/StartLocalStation", opts...)
	if err != nil {
		return nil, err
	}
	x := &gridServiceStartLocalStationClient{stream}
	return x, nil
}

type GridService_StartLocalStationClient interface {
	Send(*StartLocalStationRequest) error
	CloseAndRecv() (*StartStationResponse, error)
	grpc.ClientStream
}

type gridServiceStartLocalStationClient struct {
	grpc.ClientStream
}

func (x *gridServiceStartLocalStationClient) Send(m *StartLocalStationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gridServiceStartLocalStationClient) CloseAndRecv() (*StartStationResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartStationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gridServiceClient) StartFromPreviousStation(ctx context.Context, in *StartFromPreviousStationRequest, opts ...grpc.CallOption) (*StartStationResponse, error) {
	out := new(StartStationResponse)
	err := c.cc.Invoke(ctx, "/v1.GridService/StartFromPreviousStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gridServiceClient) StartStation(ctx context.Context, in *StartStationRequest, opts ...grpc.CallOption) (*StartStationResponse, error) {
	out := new(StartStationResponse)
	err := c.cc.Invoke(ctx, "/v1.GridService/StartStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gridServiceClient) ListStation(ctx context.Context, in *ListStationRequest, opts ...grpc.CallOption) (*ListStationResponse, error) {
	out := new(ListStationResponse)
	err := c.cc.Invoke(ctx, "/v1.GridService/ListStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gridServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (GridService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &GridService_ServiceDesc.Streams[1], "/v1.GridService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &gridServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GridService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type gridServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *gridServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gridServiceClient) GetStation(ctx context.Context, in *GetStationRequest, opts ...grpc.CallOption) (*GetStationResponse, error) {
	out := new(GetStationResponse)
	err := c.cc.Invoke(ctx, "/v1.GridService/GetStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gridServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (GridService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &GridService_ServiceDesc.Streams[2], "/v1.GridService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &gridServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GridService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type gridServiceListenClient struct {
	grpc.ClientStream
}

func (x *gridServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gridServiceClient) StopStation(ctx context.Context, in *StopStationRequest, opts ...grpc.CallOption) (*StopStationResponse, error) {
	out := new(StopStationResponse)
	err := c.cc.Invoke(ctx, "/v1.GridService/StopStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GridServiceServer is the server API for GridService service.
// All implementations must embed UnimplementedGridServiceServer
// for forward compatibility
type GridServiceServer interface {
	// StartLocalStation starts a Station on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the grid/config.yaml
	//   3. all bytes constituting the Station YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalStation(GridService_StartLocalStationServer) error
	// StartFromPreviousStation starts a new Station based on a previous one.
	// If the previous Station does not have the can-replay condition set this call will result in an error.
	StartFromPreviousStation(context.Context, *StartFromPreviousStationRequest) (*StartStationResponse, error)
	// StartStationRequest starts a new Station based on its specification.
	StartStation(context.Context, *StartStationRequest) (*StartStationResponse, error)
	// Searches for Station known to this instance
	ListStation(context.Context, *ListStationRequest) (*ListStationResponse, error)
	// Subscribe listens to new Station updates
	Subscribe(*SubscribeRequest, GridService_SubscribeServer) error
	// GetStation retrieves details of a single Station
	GetStation(context.Context, *GetStationRequest) (*GetStationResponse, error)
	// Listen listens to Station updates and log output of a running Station
	Listen(*ListenRequest, GridService_ListenServer) error
	// StopStation stops a currently running Station
	StopStation(context.Context, *StopStationRequest) (*StopStationResponse, error)
	mustEmbedUnimplementedGridServiceServer()
}

// UnimplementedGridServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGridServiceServer struct {
}

func (UnimplementedGridServiceServer) StartLocalStation(GridService_StartLocalStationServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalStation not implemented")
}
func (UnimplementedGridServiceServer) StartFromPreviousStation(context.Context, *StartFromPreviousStationRequest) (*StartStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousStation not implemented")
}
func (UnimplementedGridServiceServer) StartStation(context.Context, *StartStationRequest) (*StartStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStation not implemented")
}
func (UnimplementedGridServiceServer) ListStation(context.Context, *ListStationRequest) (*ListStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStation not implemented")
}
func (UnimplementedGridServiceServer) Subscribe(*SubscribeRequest, GridService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedGridServiceServer) GetStation(context.Context, *GetStationRequest) (*GetStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStation not implemented")
}
func (UnimplementedGridServiceServer) Listen(*ListenRequest, GridService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedGridServiceServer) StopStation(context.Context, *StopStationRequest) (*StopStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStation not implemented")
}
func (UnimplementedGridServiceServer) mustEmbedUnimplementedGridServiceServer() {}

// UnsafeGridServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GridServiceServer will
// result in compilation errors.
type UnsafeGridServiceServer interface {
	mustEmbedUnimplementedGridServiceServer()
}

func RegisterGridServiceServer(s grpc.ServiceRegistrar, srv GridServiceServer) {
	s.RegisterService(&GridService_ServiceDesc, srv)
}

func _GridService_StartLocalStation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GridServiceServer).StartLocalStation(&gridServiceStartLocalStationServer{stream})
}

type GridService_StartLocalStationServer interface {
	SendAndClose(*StartStationResponse) error
	Recv() (*StartLocalStationRequest, error)
	grpc.ServerStream
}

type gridServiceStartLocalStationServer struct {
	grpc.ServerStream
}

func (x *gridServiceStartLocalStationServer) SendAndClose(m *StartStationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gridServiceStartLocalStationServer) Recv() (*StartLocalStationRequest, error) {
	m := new(StartLocalStationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GridService_StartFromPreviousStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GridServiceServer).StartFromPreviousStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GridService/StartFromPreviousStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GridServiceServer).StartFromPreviousStation(ctx, req.(*StartFromPreviousStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GridService_StartStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GridServiceServer).StartStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GridService/StartStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GridServiceServer).StartStation(ctx, req.(*StartStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GridService_ListStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GridServiceServer).ListStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GridService/ListStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GridServiceServer).ListStation(ctx, req.(*ListStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GridService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GridServiceServer).Subscribe(m, &gridServiceSubscribeServer{stream})
}

type GridService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type gridServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *gridServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GridService_GetStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GridServiceServer).GetStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GridService/GetStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GridServiceServer).GetStation(ctx, req.(*GetStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GridService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GridServiceServer).Listen(m, &gridServiceListenServer{stream})
}

type GridService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type gridServiceListenServer struct {
	grpc.ServerStream
}

func (x *gridServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GridService_StopStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GridServiceServer).StopStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GridService/StopStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GridServiceServer).StopStation(ctx, req.(*StopStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GridService_ServiceDesc is the grpc.ServiceDesc for GridService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GridService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.GridService",
	HandlerType: (*GridServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousStation",
			Handler:    _GridService_StartFromPreviousStation_Handler,
		},
		{
			MethodName: "StartStation",
			Handler:    _GridService_StartStation_Handler,
		},
		{
			MethodName: "ListStation",
			Handler:    _GridService_ListStation_Handler,
		},
		{
			MethodName: "GetStation",
			Handler:    _GridService_GetStation_Handler,
		},
		{
			MethodName: "StopStation",
			Handler:    _GridService_StopStation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalStation",
			Handler:       _GridService_StartLocalStation_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _GridService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _GridService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grid.proto",
}
